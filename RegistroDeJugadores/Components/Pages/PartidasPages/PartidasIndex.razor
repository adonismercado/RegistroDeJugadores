@page "/Partida/Index"
@inject PartidasService partidasService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Index de Partidas</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		<div class="card-header d-flex justify-content-between align-items-center">
			<h5 class="card-title"><strong>Index de Partidas</strong></h5>
			<a href="/Partida/Create" class="btn btn-primary"> <span class="bi bi-plus-square mt-3"></span> Crear</a>
		</div>

		<div class="card-body">
			@*labels*@
			<div class="row">
				@*Filtrar Por*@
				<div class="col-3">
					<label class="col-form-label"><strong>Filtrar por</strong></label>
				</div>

				@*ValorFiltro*@
				<div class="col-4">
					<label class="col-form-label"><strong>B&uacute;squeda</strong></label>
				</div>
			</div>

			@*Inputs y Botones*@
			<div class="row align-items-center">
				@*filtro*@
				<div class="col-3">
					<InputSelect class="form-select" @bind-Value="Filtro">
						<option value="" selected disabled>Elija una opci&oacute;n</option>
						<option value="PartidaId">PartidaId</option>
						<option value="Jugador1Id">Jugador1Id</option>
						<option value="Jugador2Id">Jugador2Id</option>
						<option value="EstadoPartida">EstadoPartida</option>
						<option value="GanadorId">GanadorId</option>
						<option value="TurnoJugadorId">TurnoJugadorId</option>
						<option value="EstadoTablero">EstadoTablero</option>
						<option value="FechaInicio">FechaInicio</option>
						<option value="FechaFin">FechaFin</option>
					</InputSelect>
				</div>

				@*Busqueda*@
				<div class="col-4">
					<div class="input-group">
						<input class="form-control" @bind-value="ValorFiltro" placeholder="Buscar"></input>
						<button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
					</div>
				</div>
			</div>
			<div class="table-responsive">
				<table class="table table-hover table-striped table-bordered align-middle text-center mt-3">
					<thead class="table table-striped text-black">
						<tr>
							<th>ID</th>
							<th>JUGADOR 1</th>
							<th>JUGADOR 2</th>
							<th>ESTADO PARTIDA</th>
							<th>GANADOR</th>
							<th>TURNO JUGADOR</th>
							<th>ESTADO TABLERO</th>
							<th>FECHA INICIO</th>
							<th>FECHA FIN</th>
							<th>OPCIONES</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var partida in ListaPartidas)
						{
							<tr>
								<td>@partida.PartidaId</td>
								<td>@partida.Jugador1?.Nombre</td>
								<td>@partida.Jugador2?.Nombre</td>
								<td>@partida.EstadoPartida</td>
								<td>@partida.Ganador?.Nombre</td>
								<td>@partida.TurnoJugador?.Nombre</td>
								<td>@partida.EstadoTablero</td>
								<td>@partida.FechaInicio.ToString("dd/MM/yyyy")</td>
								<td>@partida.FechaFin?.ToString("dd/MM/yyyy")</td>

								<td class="text-center">
									<a href="/Partida/Edit/@partida.PartidaId" class="btn btn-outline-primary bi bi-pencil"></a>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
		<div class="card-footer space-between">
			<label>Cantidad: @ListaPartidas.Count()</label>
		</div>
	</div>
</div>

@code {
	public List<Partidas> ListaPartidas { get; set; } = new List<Partidas>();

	public string Filtro { get; set; }
	public string ValorFiltro { get; set; }

	protected override async Task OnInitializedAsync()
	{
		ListaPartidas = await partidasService.GetList(p => p.PartidaId > 0);
	}

	private async Task Buscar()
	{
		if (ValorFiltro.Trim() != "")
		{
			if (Filtro == "PartidaId" && int.TryParse(ValorFiltro, out var partidaId))
			{
				ListaPartidas = await partidasService.GetList(p => p.PartidaId == partidaId);
			}
			if (Filtro == "Jugador1Id" && int.TryParse(ValorFiltro, out var jugador1Id))
			{
				ListaPartidas = await partidasService.GetList(p => p.Jugador1Id == jugador1Id);
			}
			if (Filtro == "Jugador2Id" && int.TryParse(ValorFiltro, out var jugador2Id))
			{
				ListaPartidas = await partidasService.GetList(p => p.Jugador2Id == jugador2Id);
			}
			if (Filtro == "EstadoPartida")
			{
				ListaPartidas = await partidasService.GetList(p => p.EstadoPartida.ToLower().Contains(ValorFiltro));
			}
			if (Filtro == "GanadorId" && int.TryParse(ValorFiltro, out var ganadorId))
			{
				ListaPartidas = await partidasService.GetList(p => p.GanadorId == ganadorId);
			}
			if (Filtro == "TurnoJugadorId" && int.TryParse(ValorFiltro, out var turnoJugadorId))
			{
				ListaPartidas = await partidasService.GetList(p => p.TurnoJugadorId == turnoJugadorId);
			}
			if (Filtro == "EstadoTablero")
			{
				ListaPartidas = await partidasService.GetList(p => p.EstadoTablero.ToLower().Contains(ValorFiltro));
			}
		}
		else
		{
			ListaPartidas = await partidasService.GetList(p => p.PartidaId > 0);
		}
	}
}
