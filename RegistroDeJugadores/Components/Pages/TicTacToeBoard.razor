@page "/board"

@inject PlayerTypeService playerTypeService
@inject JugadoresService jugadoresService
@inject PartidasService partidasService
@rendermode InteractiveServer

<PageTitle>Board TicTacToe</PageTitle>
<!-- Pantalla de Juego TicTacToe -->
<div class="game-screen">
	<h2 class="game-status">@GameStatus</h2>

	<div class="game-board">
		@for (var i = 0; i < 9; i++)
		{
			var cellIndex = i; // Copia local para evitar problemas con el closure desde el lamda

			<button class="cell @GetPlayerClass(playerTypeService.board[cellIndex])"
					@onclick="() => HandleCellClick(cellIndex)"
					disabled="@(playerTypeService.board[cellIndex] != null || playerTypeService.winner != null || playerTypeService.esEmpate)">
				@playerTypeService.board[cellIndex]?.ToString()
			</button>
		}
	</div>

	<button class="btn btn-secondary mt-4"
			@onclick="RestartGame">
		Reiniciar Juego
	</button>
</div>

@code {
	public List<Jugadores> ListaJugadores { get; set; } = new List<Jugadores>();

	protected override async Task OnInitializedAsync()
	{
		ListaJugadores = await jugadoresService.GetList(j => j.JugadorId > 0);
	}

	private string GameStatus
	{
		get
		{
			if (playerTypeService.winner != null)
			{
				string nombreGanador = playerTypeService.winner == PlayerType.X
						? ListaJugadores.FirstOrDefault(j => j.JugadorId == playerTypeService.Jugador1Id)?.Nombre ?? "Jugador X"
						: ListaJugadores.FirstOrDefault(j => j.JugadorId == playerTypeService.Jugador2Id)?.Nombre ?? "Jugador O";

				return $"🏆 ¡Ganador: {nombreGanador}!";
			}

			if (playerTypeService.esEmpate)
			{
				return "🤝 ¡Es un empate!";
			}

			string nombreTurno = playerTypeService._currentPlayerType == PlayerType.X
					? ListaJugadores.FirstOrDefault(j => j.JugadorId == playerTypeService.Jugador1Id)?.Nombre ?? "Jugador X"
					: ListaJugadores.FirstOrDefault(j => j.JugadorId == playerTypeService.Jugador2Id)?.Nombre ?? "Jugador O";

			return $"Turno de: {nombreTurno}";

		}
	}

	private async Task HandleCellClick(int index)
	{
		// Ignorar si la celda esta ocupada o el juego termino.
		if (playerTypeService.board[index] != null || playerTypeService.winner != null || playerTypeService.esEmpate)
		{
			return;
		}

		playerTypeService.board[index] = playerTypeService._currentPlayerType;

		playerTypeService.winner = CheckForWinner();
		if (playerTypeService.winner != null)
		{
			await ActualizarPartida();
			return; // La partida finaliza.
		}

		// Comprobar empate.
		playerTypeService.esEmpate = playerTypeService.board.All(cell => cell != null);
		if (playerTypeService.esEmpate)
		{
			await ActualizarPartida();
			return; // La partida termina.
		}

		// Cambiar turno.
		playerTypeService._currentPlayerType = (playerTypeService._currentPlayerType == PlayerType.X)
			? PlayerType.O
			: PlayerType.X;
	}

	private async Task ActualizarPartida()
	{
		if (!playerTypeService.PartidaId.HasValue)
		{
			return;
		}

		var partida = await partidasService.Buscar(playerTypeService.PartidaId.Value);
		if (partida == null)
		{
			return;
		}

		partida.EstadoPartida = playerTypeService.winner != null
				? "Finalizada"
				: "Empate";
		partida.GanadorId = playerTypeService.winner == PlayerType.X
				? playerTypeService.Jugador1Id
				: playerTypeService.Jugador2Id;
		partida.TurnoJugadorId = playerTypeService.Jugador1Id;
		partida.EstadoTablero = string.Concat(playerTypeService.board.Select(c => c?.ToString() ?? "-"));
		partida.FechaFin = DateTime.UtcNow;

		await partidasService.Guardar(partida);
	}

	private PlayerType? CheckForWinner()
	{
		var winningLines = new[]
		{
			new[] {0,1,2}, new[] {3,4,5}, new[] {6,7,8}, // Victorias Horizontales
			new[] {0,3,6}, new[] {1,4,7}, new[] {2,5,8}, // Victorias Verticales
			new[] {0,4,8}, new[] {2,4,6} // Victorias Diagonales
		};

		foreach (var line in winningLines)
		{
			var (a, b, c) = (line[0], line[1], line[2]);
			if (playerTypeService.board[a].HasValue && playerTypeService.board[a] == playerTypeService.board[b] && playerTypeService.board[a] == playerTypeService.board[c])
			{
				return playerTypeService.board[a];
			}
		}

		return null;
	}

	private void RestartGame()
	{
		playerTypeService.Reset();
	}

	private string GetPlayerClass(PlayerType? player)
	{
		if (!player.HasValue)
		{
			return "";
		}
		return player == PlayerType.X
			? "player-x"
			: "player-o";
	}
}
