@page "/"
@inject JugadoresService jugadoresService
@inject PartidasService partidasService
@inject MovimientosService movimientosService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>TicTacToe</PageTitle>

<div class="container mx-auto max-w-lg bg-white rounded-lg shadow-xl text-center">
	<div class="game-container">
		@if (!gameStarted)
		{
			<!-- Pantalla de Selección de Jugadores -->
			<div class="selection-screen">
				<h1>Elige los jugadores</h1>
				<div class="mb-3">
					<label><strong>Jugador X</strong></label>
					<InputSelect class="form-select mt-2" @bind-Value="Jugador1Id">
						<option value="">-- Seleccione un Jugador --</option>
						@foreach (var jugador in listaJugadores)
						{
							<option value="@jugador.JugadorId" disabled="@(jugador.JugadorId == Jugador2Id)">
								@jugador.Nombre
							</option>
						}
					</InputSelect>
				</div>

				<div class="mb-3">
					<label><strong>Jugador O</strong></label>
					<InputSelect class="form-select mt-2" @bind-Value="Jugador2Id">
						<option value="">-- Seleccione un Jugador --</option>
						@foreach (var jugador in listaJugadores)
						{
							<option value="@jugador.JugadorId" disabled="@(jugador.JugadorId == Jugador1Id)">
								@jugador.Nombre
							</option>
						}
					</InputSelect>
				</div>

				<button class="btn btn-success btn-lg mt-4"
						disabled="@(Jugador1Id == null || Jugador2Id == null)"
						@onclick="StartGame">
					Iniciar Partida
				</button>
			</div>
		}
		else
		{
			<!-- Pantalla del Tablero de Juego -->
			<div class="game-screen">
				<h2 class="game-status">@GameStatus</h2>

				<div class="game-board">
					@for (var i = 0; i < 9; i++)
					{
						var cellIndex = i;
						<button class="cell @GetPlayerClass(board[cellIndex])"
								@onclick="() => HandleCellClick(cellIndex)"
								disabled="@(board[cellIndex] != null || winner != null || esEmpate)">
							@board[cellIndex]?.ToString()
						</button>
					}
				</div>

				<div class="d-flex justify-content-center mt-4">
					<button class="btn btn-secondary" @onclick="RestartGame">Reiniciar Juego</button>
				</div>
			</div>
		}
	</div>
</div>

@code {
	private enum PlayerType { X, O }
	private bool gameStarted = false;
	private PlayerType? _currentPlayerType = PlayerType.X;
	private PlayerType? winner;
	private bool esEmpate = false;
	private int? Jugador1Id;
	private int? Jugador2Id;
	private int? PartidaId;
	private PlayerType?[] board = new PlayerType?[9];

	private List<Jugadores> listaJugadores = new List<Jugadores>();

	protected override async Task OnInitializedAsync()
	{
		listaJugadores = await jugadoresService.GetList(j => j.JugadorId > 0);
	}

	private string GameStatus
	{
		get
		{
			if (winner != null)
			{
				string nombreGanador = winner == PlayerType.X
						? listaJugadores.FirstOrDefault(j => j.JugadorId == Jugador1Id)?.Nombre ?? "Jugador X"
						: listaJugadores.FirstOrDefault(j => j.JugadorId == Jugador2Id)?.Nombre ?? "Jugador O";

				return $"🏆 ¡Ganador: {nombreGanador}!";
			}

			if (esEmpate)
			{
				return "🤝 ¡Es un empate!";
			}

			string nombreTurno = _currentPlayerType == PlayerType.X
					? listaJugadores.FirstOrDefault(j => j.JugadorId == Jugador1Id)?.Nombre ?? "Jugador X"
					: listaJugadores.FirstOrDefault(j => j.JugadorId == Jugador2Id)?.Nombre ?? "Jugador O";

			return $"Turno de: {nombreTurno}";
		}
	}

	private async Task StartGame()
	{
		if (Jugador1Id.HasValue && Jugador2Id.HasValue)
		{
			var nuevaPartida = new Partidas
			{
				Jugador1Id = Jugador1Id,
				Jugador2Id = Jugador2Id,
				TurnoJugadorId = Jugador1Id,
				EstadoPartida = "En Progreso",
				EstadoTablero = "---------",
				FechaInicio = DateTime.UtcNow
			};

			bool guardada = await partidasService.Guardar(nuevaPartida);

			if (guardada)
			{
				PartidaId = nuevaPartida.PartidaId;
				gameStarted = true;
			}
			else
			{
				Console.WriteLine("Error al crear partida en la base de datos.");
			}
		}
	}

	private async Task HandleCellClick(int index)
	{
		if (board[index] != null || winner != null || esEmpate)
			return;

		board[index] = _currentPlayerType;

		int jugadorId = _currentPlayerType == PlayerType.X ? Jugador1Id.Value : Jugador2Id.Value;
		await RegistrarMovimiento(index / 3, index % 3, jugadorId);

		winner = CheckForWinner();
		if (winner != null)
		{
			await ActualizarEstadisticas();
			return;
		}

		esEmpate = board.All(c => c != null);
		if (esEmpate)
		{
			await ActualizarEstadisticas();
			return;
		}

		_currentPlayerType = _currentPlayerType == PlayerType.X ? PlayerType.O : PlayerType.X;
	}

	private PlayerType? CheckForWinner()
	{
		var lines = new[]
		{
			new[] {0,1,2}, new[] {3,4,5}, new[] {6,7,8},
			new[] {0,3,6}, new[] {1,4,7}, new[] {2,5,8},
			new[] {0,4,8}, new[] {2,4,6}
		};

		foreach (var line in lines)
		{
			var (a, b, c) = (line[0], line[1], line[2]);
			if (board[a].HasValue && board[a] == board[b] && board[a] == board[c])
				return board[a];
		}
		return null;
	}

	private async Task RegistrarMovimiento(int fila, int columna, int jugadorId)
	{
		if (!PartidaId.HasValue) return;

		var movimiento = new Movimientos
		{
			PartidaId = PartidaId.Value,
			JugadorId = jugadorId,
			PosicionFila = fila,
			PosicionColumna = columna
		};
		await movimientosService.Guardar(movimiento);
	}

	private async Task ActualizarEstadisticas()
	{
		if (!PartidaId.HasValue) return;

		var partida = await partidasService.Buscar(PartidaId.Value);
		if (partida == null) return;

		partida.EstadoPartida = winner != null ? "Finalizada" : "Empate";
		partida.GanadorId = winner == PlayerType.X ? Jugador1Id : Jugador2Id;
		partida.TurnoJugadorId = Jugador1Id;
		partida.EstadoTablero = string.Concat(board.Select(c => c?.ToString() ?? "-"));
		partida.FechaFin = DateTime.UtcNow;

		await partidasService.Guardar(partida);

		var jugador1 = await jugadoresService.Buscar(Jugador1Id.Value);
		var jugador2 = await jugadoresService.Buscar(Jugador2Id.Value);

		if (jugador1 != null && jugador2 != null)
		{
			if (partida.EstadoPartida == "Empate")
			{
				jugador1.Empates++;
				jugador2.Empates++;
			}
			else if (partida.GanadorId == jugador1.JugadorId)
			{
				jugador1.Victorias++;
				jugador2.Derrotas++;
			}
			else
			{
				jugador1.Derrotas++;
				jugador2.Victorias++;
			}
			await jugadoresService.Modificar(jugador1);
			await jugadoresService.Modificar(jugador2);
		}
	}

	private async Task RestartGame()
	{
		board = new PlayerType?[9];
		winner = null;
		esEmpate = false;
		_currentPlayerType = PlayerType.X;

		var nuevaPartida = new Partidas
		{
			Jugador1Id = Jugador1Id,
			Jugador2Id = Jugador2Id,
			TurnoJugadorId = Jugador1Id,
			EstadoPartida = "En Progreso",
			EstadoTablero = "---------",
			FechaInicio = DateTime.UtcNow
		};

		bool guardada = await partidasService.Guardar(nuevaPartida);
		if (guardada)
			PartidaId = nuevaPartida.PartidaId;
	}

	private string GetPlayerClass(PlayerType? player)
	{
		if (!player.HasValue) return "";
		return player == PlayerType.X ? "player-x" : "player-o";
	}

}
