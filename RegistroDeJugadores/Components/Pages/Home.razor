@page "/home"

@inject PlayerTypeService playerTypeService
@inject JugadoresService jugadoresService
@inject PartidasService partidasService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="container mx-auto max-w-lg bg-white rounded-lg shadow-xl text-center">
	<div class="game-container">
		@if (!playerTypeService.gameStarted)
		{
			<!-- Pantalla de Seleccion del Jugador -->
			<div class="selection-screen">
				<h1>Elige los jugadores</h1>
				<div class="mb-3">
					<label><strong>Jugador X</strong></label>
					<InputSelect class="form-select mt-2" @bind-Value="playerTypeService.Jugador1Id" @onchange="e => SelectPlayerType(PlayerType.X)">
						<option value="">-- Seleccione un Jugador --</option>
						@foreach (var jugador in listaJugadores)
						{
							<option value="@jugador.JugadorId" disabled="@(jugador.JugadorId == playerTypeService.Jugador2Id)">
								@jugador.Nombre
							</option>
						}
					</InputSelect>
				</div>

				<div class="mb-3">
					<label><strong>Jugador O</strong></label>
					<InputSelect class="form-select mt-2" @bind-Value="playerTypeService.Jugador2Id" @onchange="e => SelectPlayerType(PlayerType.O)">
						<option value="">-- Seleccione un Jugador --</option>
						@foreach (var jugador in listaJugadores)
						{
							<option value="@jugador.JugadorId" disabled="@(jugador.JugadorId == playerTypeService.Jugador1Id)">
								@jugador.Nombre
							</option>
						}
					</InputSelect>
				</div>

				@*Boton Iniciar Partida*@
				<button class="btn btn-success btn-lg mt-4"
						disabled="@(playerTypeService.Jugador1Id == null || playerTypeService.Jugador2Id == null)"
						@onclick="StartGame">
					Iniciar Partida
				</button>
			</div>
		}
	</div>
</div>

@code {
	private List<Jugadores> listaJugadores = new List<Jugadores>();

	protected override async Task OnInitializedAsync()
	{
		listaJugadores = await jugadoresService.GetList(j => j.JugadorId > 0);
	}

	private void SelectPlayerType(PlayerType playerType)
	{
		playerTypeService.playerTypeSelection = playerType;
	}

	private async Task StartGame()
	{
		if (playerTypeService.Jugador1Id.HasValue && playerTypeService.Jugador2Id.HasValue)
		{
			var nuevaPartida = new Partidas
			{
				Jugador1Id = playerTypeService.Jugador1Id,
				Jugador2Id = playerTypeService.Jugador2Id,
				TurnoJugadorId = playerTypeService.Jugador1Id,
				EstadoPartida = "En Progreso",
				EstadoTablero = "---------",
				FechaInicio = DateTime.UtcNow
			};

			bool guardada = await partidasService.Guardar(nuevaPartida);

			if (guardada)
			{
				playerTypeService.PartidaId = nuevaPartida.PartidaId;

				playerTypeService.gameStarted = true;
				navigationManager.NavigateTo("/board");
			}
			else
			{
				Console.WriteLine("Error al crear partida en la base de datos.");
			}
		}
	}
}
