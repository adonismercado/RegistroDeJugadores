@page "/"
@inject TicTacToeService gameService
@inject IPartidasApiService partidasApiService
@inject NavigationManager navigationManager

<div class="container mx-auto max-w-lg bg-white rounded-lg shadow-xl text-center">
	<div class="game-container">
		@if (!gameService.GameStarted)
		{
			<div class="selection-screen">
				<h1>Crear Nueva Partida</h1>
				<div class="mb-3">
					<label><strong>ID Jugador 1 (X)</strong></label>
					<input type="number"
						   class="form-control mt-2"
						   placeholder="Ingresa ID del Jugador 1"
						   value="@gameService.Jugador1Id"
						   @onchange="@(e => {
												gameService.Jugador1Id = string.IsNullOrEmpty(e.Value?.ToString())
																		? 0
																		: int.Parse(e.Value.ToString());
							})" />
  				</div>

				<button class="btn btn-success btn-lg mt-4"
						disabled="@(gameService.Jugador1Id == 0)"
						@onclick="StartGame">
					Crear Partida
				</button>

				<hr class="my-4" />

				<h3>Unirse a Partida Existente</h3>
				<div class="mb-3">
					<label><strong>ID de la Partida</strong></label>
					<input type="number" class="form-control mt-2" placeholder="ID de la partida" @bind="partidaIdUnirse" />
				</div>

				<div class="mb-3">
					<label><strong>Tu ID de Jugador (O)</strong></label>
					<input type="number" class="form-control mt-2" placeholder="Ingresa tu ID" @bind="miJugadorIdUnirse" />
				</div>

				<button class="btn btn-dark btn-lg mt-3"
						disabled="@(partidaIdUnirse == 0 || miJugadorIdUnirse == 0)"
						@onclick="JoinGame">
					Unirse a la Partida
				</button>

				@if (!string.IsNullOrEmpty(gameService.ErrorMessage))
				{
					<div class="alert alert-danger mt-3">
						@gameService.ErrorMessage
					</div>
				}
			</div>
		}
	</div>
</div>

@code {
	private int partidaIdUnirse = 0;
	private int miJugadorIdUnirse = 0;

	private bool mostrarModal = false;
	private List<PartidaResponse?> partidasDisponibles;

	private async Task StartGame()
	{
		var response = await partidasApiService.PostPartida(gameService.Jugador1Id, gameService.Jugador2Id);

		if (response is Resource<PartidaResponse>.Error error)
		{
			gameService.ErrorMessage = $"Error al crear la partida: {error.Message}";
			return;
		}

		gameService.PartidaId = response.Data?.PartidaId ?? 0;
		gameService.MiJugadorId = gameService.Jugador1Id;
		gameService.CurrentPlayerType = TicTacToeService.PlayerType.X;
		gameService.GameStarted = true;

		navigationManager.NavigateTo("/gameboard");

	}

	private async Task JoinGame()
	{
		if (partidaIdUnirse <= 0 || miJugadorIdUnirse == 0)
		{
			gameService.ErrorMessage = "Debe ingresar el ID de la partida y tu ID de jugador.";
			return;
		}

		var response = await partidasApiService.GetPartida(partidaIdUnirse);

		if (response is Resource<PartidaResponse>.Error error)
		{
			gameService.ErrorMessage = $"Error al unirse: {error.Message}";
			return;
		}

		var partida = response.Data;
		gameService.PartidaId = partidaIdUnirse;
		gameService.Jugador1Id = partida.Jugador1Id;
		gameService.Jugador2Id = partida.Jugador2Id;
		gameService.MiJugadorId = miJugadorIdUnirse;

		if (gameService.Jugador2Id == null || gameService.Jugador2Id == 0)
		{
			var update = await partidasApiService.PutPartida(partidaIdUnirse, gameService.Jugador1Id, miJugadorIdUnirse);

			if (update is Resource<PartidaResponse>.Error updError)
			{
				gameService.ErrorMessage = $"Error al ingresar como jugador 2: {updError.Message}";
				return;
			}

			gameService.Jugador2Id = miJugadorIdUnirse;
		}

		gameService.CurrentPlayerType = TicTacToeService.PlayerType.X;
		gameService.GameStarted = true;

		navigationManager.NavigateTo("/gameboard");
	}

	private async Task MostrarPartidasDisponibles()
	{
		mostrarModal = true;
		partidasDisponibles = null;
		StateHasChanged();

		var response = await partidasApiService.GetPartidas();
		if (response is Resource<List<PartidaResponse>>.Success success)
		{
			partidasDisponibles = success.Data
				.Where(p => p.Jugador2Id == 0 || p.Jugador2Id == null)
				.ToList();
		}
		else
		{
			partidasDisponibles = new List<PartidaResponse();
			gameService.ErrorMessage = "Error al cargar las partidas disponibles.";
		}
	}

	private void CerrarModal()
	{
		mostrarModal = false;
	}

	private void PartidaSeleccionada(int partidaId)
	{
		partidaIdUnirse = partidaId;
		mostrarModal = false;
	}
}