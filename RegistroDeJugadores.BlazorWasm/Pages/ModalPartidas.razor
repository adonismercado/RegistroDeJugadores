@inject IPartidasApiService partidasApiService

<div class="modal fade @(EstaAbierto ? "show d-block" : "")" tabindex="-1" style="@(EstaAbierto ? "background-color: rgba(0,0,0,0.5);" : "")">
	<div class="modal-dialog modal-dialog-scrollable">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Partidas Disponibles</h5>
				<button type="button" class="btn-close" @onclick="Close"></button>
			</div>

			<div class="modal-body">
				@if (loadingPartidas)
				{
					<div class="text-center">
						<div class="spinner-border" role="status">
							<span class="visually-hidden">Cargando...</span>
						</div>
					</div>
				}
				else if (partidas != null && partidas.Any())
				{
					<div class="table-responsive">
						<table class="table table-hover">
							<thead>
								<tr>
									<th>ID</th>
									<th>Jugador 1</th>
									<th>Jugador 2</th>
									<th>Accion</th>
								</tr>
							</thead>

							<tbody>
								@foreach (var partida in partidas)
								{
									<tr class="partida-item">
										<td>@partida.PartidaId</td>
										<td>@partida.Jugador1Id</td>
										<td>@partida.Jugador2Id</td>
										<td>
											<button class="btn btn-sm btn-primary" @onclick="() => OnSelectedPartida(partida.PartidaId)">
												Seleccionar
											</button>
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				}
				else
				{
					<div class="alert alert-info">No hay partidas disponibles.</div>
				}

				@if (!string.IsNullOrWhiteSpace(errorMensaje))
				{
					<div class="alert alert-danger">@errorMensaje</div>
				}
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" @onclick="Close">Cerrar</button>
			</div>
		</div>
	</div>
</div>

@code {
	[Parameter]
	public bool EstaAbierto { get; set; }

	[Parameter]
	public EventCallback<bool> CambioEstaAbierto { get; set; }

	[Parameter]
	public EventCallback<int> OnPartidaSelected { get; set; }

	private bool loadingPartidas = false;
	private List<PartidaResponse>? partidas;
	private string? errorMensaje;

	protected override async Task OnParametersSetAsync()
	{
		if (EstaAbierto && partidas == null)
		{
			await LoadPartidas();
		}
	}

	private async Task LoadPartidas()
	{
		loadingPartidas = true;
		errorMensaje = null;

		var response = await partidasApiService.GetPartidasAsync();

		if (response is Resource<List<PartidaResponse>>.Success success)
		{
			partidas = success.Data;
		}
		else if (response is Resource<List<PartidaResponse>>.Error error)
		{
			errorMensaje = $"Error al cargar las partidas: {error.Message}";
		}

		loadingPartidas = false;
	}

	private async Task OnSelectedPartida(int partidaId)
	{
		await OnPartidaSelected.InvokeAsync(partidaId);
		await Close();
	}

	private async Task Close()
	{
		partidas = null;
		errorMensaje = null;
		await CambioEstaAbierto.InvokeAsync(false);
	}
}
