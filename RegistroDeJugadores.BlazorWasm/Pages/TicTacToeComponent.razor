@page "/gameboard"
@inject IPartidasApiService partidasApiService

<PageTitle>TicTacToe</PageTitle>

<div class="container mx-auto max-w-lg bg-white rounded-lg shadow-xl text-center">
	<div class="game-container">
		@if (!gameStarted)
		{
			<div class="container-fluid py-5">
				<h1 class="display-3 fw-bold">TicTacToe</h1>
				<p class="fs-12">
					Cada jugador solo debe colocar su símbolo una vez por turno y no debe ser sobre una casilla ya jugada.
					En caso de que el jugador haga trampa el ganador será el otro. Se debe conseguir realizar una línea recta o diagonal por símbolo para ganar.
				</p>
			</div>
			<!-- SELECCIONAR JUGADORES Y CREAR O UNIRSE A PARTIDA -->
			<div class="selection-screen">
				<h1>Elige los jugadores</h1>
				<div class="player-buttons">
					<div class="mb-3">
						<label><strong>Jugador X</strong></label>
						<input type="number" class="form-control" bind="Jugador1Id" placeholder="Jugador 1 ID" />
					</div>

					<div class="mb-3">
						<label><strong>Jugador O</strong></label>
						<input type="number" class="form-control" bind="Jugador2Id" placeholder="Jugador 2 ID" />
					</div>
				</div>

				@*Boton Crear Partida*@
				<button class="btn btn-success btn-lg mt-2"
						disabled="@(Jugador1Id == 0)"
						@onclick="StartGame">
					Crear Partida
				</button>

				<hr class="my-4"/>

				<h3>Unirse a Partida</h3>
				<div class="form-group">
					<label for="partidaId"><strong>ID de la Partida:</strong></label>
					<div class="input-group">
						<input id="partidaId" type="number" class="form-control " @bind="PartidaId" placeholder="ID de la partida" />
						<button class="btn btn-outline-secondary" type="button" @onclick="AbrirModalPartidas">
							<span class="bi-search-icon"></span>
						</button>
					</div>
				</div>
				<button class="btn btn-dark btn-lg mt-3"
						disabled="@(PartidaId == 0)"
						@onclick="JoinGame">
					Unirse a Partida
				</button>

				@if (!string.IsNullOrWhiteSpace(errorMensaje))
				{
					<div class="alert alert-dalger">@errorMensaje</div>
				}
			</div>
		}
		else
		{
			<!-- PANTALLA DE JUEGO -->
			<div class="game-screen">
				<h2>Partida #@PartidaId</h2>
				<h2 class="game-status">@GameStatus</h2>

				<div class="game-board">
					@for (var i = 0; i < 9; i++)
					{
						var cellIndex = i; // Copia local para evitar problemas con el closure desde el lamda

						<button class="cell @GetPlayerClass(board[cellIndex])"
								@onclick="() => HandleCellClick(cellIndex)"
								disabled="@(board[cellIndex] != null || winner != null || esEmpate)">
							@board[cellIndex]?.ToString()
						</button>
					}
				</div>

				<button class="btn btn-secondary" @onclick="LeaveGame">
					Salir de la Partida
				</button>
			</div>
		}
	</div>
</div>

<ModalPartidas EstaAbierto="mostrarModal"
			   CambioEstaAbierto="(value) => mostrarModal = value"
			   OnPartidaSelected="HandlePartidaSelected"/>

@code {
	public Guid CurrentSession { get; set; }
	public bool gameStarted { get; set; }
	public PlayerType? playerTypeSelection { get; set; }
	public PlayerType _currentPlayerType { get; set; }
	public PlayerType? winner { get; set; }
	public bool esEmpate { get; set; }
	public PlayerType?[] board { get; set; } = new PlayerType?[9];

	public enum PlayerType { X, O }
	public int Jugador1Id { get; set; }
	public int Jugador2Id { get; set; }
	public int PartidaId { get; set; }

	public string errorMensaje;
	public bool mostrarModal;

	private string GameStatus
	{
		get
		{
			if (winner != null) return $"🏆 ¡Ganador: {winner}!";
			return esEmpate
				? "🤝 ¡Es un empate!"
				: $"Turno de: {_currentPlayerType}";
		}
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		CurrentSession = Guid.NewGuid();
	}

	private async Task StartGame()
	{
		if (Jugador1Id <= 0 && Jugador2Id <= 0)
		{
			errorMensaje = "Error: Debe ingresar ambos jugadores para crear una partida.";
			return;
		}

		var response = await partidasApiService.PostPartida(Jugador1Id, Jugador2Id);
		if (response is Resource<PartidaResponse>.Error error)
		{
			errorMensaje = $"Error al crear la partida: {errorMensaje}";
			return;
		}

		PartidaId = response.Data?.PartidaId ?? 0;
		gameStarted = true;
	}

	private async Task JoinGame()
	{
		if (PartidaId <= 0)
		{
			errorMensaje = "Error: Debe ingresar el ID de la partida.";
			return;
		}

		var response = await partidasApiService.GetPartidaAsync(PartidaId);
		if (response is Resource<PartidaResponse>.Error error)
		{
			errorMensaje = $"Error al unirse a la partida: {errorMensaje}";
			return;
		}

		gameStarted = true;
	}

	private void HandleCellClick(int index)
	{
		if (board[index] != null || winner != null || esEmpate)
		{
			return;
		}

		board[index] = _currentPlayerType;

		winner = CheckForWinner();
		if (winner != null)
		{
			return; // El juego termina.
		}

		esEmpate = board.All(cell => cell != null);
		if (esEmpate)
		{
			return; // El juego termina.
		}

		_currentPlayerType = (_currentPlayerType == PlayerType.X)
			? PlayerType.O
			: PlayerType.X;
	}

	private PlayerType? CheckForWinner()
	{
		var winningLines = new[]
		{
			 new[] {0, 1, 2}, new[] {3, 4, 5}, new[] {6, 7, 8}, // Victorias Horizontales
             new[] {0, 3, 6}, new[] {1, 4, 7}, new[] {2, 5, 8}, // Victorias Verticales
             new[] {0, 4, 8}, new[] {2, 4, 6} // Victorias Diagonales
        };

		foreach (var line in winningLines)
		{
			var (a, b, c) = (line[0], line[1], line[2]);
			if (board[a].HasValue && board[a] == board[b] && board[a] == board[c])
			{
				return board[a];
			}
		}

		return null; // Nadie ha ganado
	}

	private string GetPlayerClass(PlayerType? player)
	{
		if (!player.HasValue) return "";
		return player == PlayerType.X ? "player-x" : "player-o";
	}

	private void LeaveGame()
	{
		gameStarted = false;
		PartidaId = 0;
		Jugador1Id = 0;
		Jugador2Id = 0;
		playerTypeSelection = null;
		board = new PlayerType?[9];
		errorMensaje = null;
	}

	private void AbrirModalPartidas()
	{
		mostrarModal = true;
	}

	private void HandlePartidaSelected(int partidaId)
	{
		PartidaId = partidaId;
	}
}