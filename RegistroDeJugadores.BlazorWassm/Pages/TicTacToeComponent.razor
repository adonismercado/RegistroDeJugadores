@page "/gameboard"
@inject IPartidasApiService partidasApiService

@code {
	private Guid CurrentSession { get; set; }
	public bool gameStarted { get; set; }
	public PlayerType? playerTypeSelection { get; set; }
	public PlayerType _currentPlayerType { get; set; }
	public PlayerType? winner { get; set; }
	public bool esEmpate { get; set; }
	public PlayerType?[] board { get; set; } = new PlayerType?[9];

	public enum PlayerType { X, O }
	public int Jugador1Id { get; set; }
	public int Jugador2Id { get; set; }
	public int PartidaId { get; set; }

	public string errorMessage { get; set; }
	public bool refreshing = false;
	public bool mostrarModal = false;

	private string GameStatus
	{
		get
		{
			if (winner != null)
			{
				return "🏆 ¡Ganador: {winner}!";
			}
			return esEmpate
				? "🤝 ¡Es un empate!"
				: $"Turno de: {_currentPlayerType}";
		}
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		CurrentSession = Guid.NewGuid();
	}

	private async Task StartGame()
	{
		if (Jugador1Id <= 0 || Jugador2Id <= 0)
		{
			errorMessage = "Debe ingresar ambos jugadores.";
			return;
		}

		var response = await partidasApiService.PostPartida(Jugador1Id, Jugador2Id);
		if (response is Resource<PartidasResponse>.Error error)
		{
			errorMessage = $"Error al crear la partida: {error.Message}";
		}

		PartidaId = response.Data?.PartidaId ?? 0;
		gameStarted = true;
	}

	private async Task JoinGame()
	{
		if (PartidaId <= 0)
		{
			errorMessage = "Error: Debe ingresar el ID de la partida.";
			return;
		}

		var response = await partidasApiService.GetPartidaAsync(PartidaId);
		if (response is Resource<PartidasResponse>.Error error)
		{
			errorMessage = $"Error al unirse a la partida: {error.Message}";
			return;
		}

		gameStarted = true;
	}

	private async Task HandleCellClick(int index)
	{
		if (board[index] != null || winner != null || esEmpate)
		{
			return;
		}

		board[index] = _currentPlayerType;

		winner = CheckForWinner();
		if (winner != null)
		{
			return; // Juego terminado.
		}

		esEmpate = board.All(cell => cell != null);
		if (esEmpate)
		{
			return; // Juego terminado.
		}

		_currentPlayerType = (_currentPlayerType == PlayerType.X)
			? PlayerType.O
			: PlayerType.X;
	}

	private async Task RefreshGameState()
	{
		refreshing = true;
		await Task.Delay(2000);
		refreshing = false;
	}

	private PlayerType? CheckForWinner()
	{
		var winningLines = new[]
		{
			new[] {0, 1, 2}, new[] {3, 4, 5}, new[] {6, 7, 8}, // Victorias Horizontales
             new[] {0, 3, 6}, new[] {1, 4, 7}, new[] {2, 5, 8}, // Victorias Verticales
             new[] {0, 4, 8}, new[] {2, 4, 6} // Victorias Diagonales
		};

		foreach (var line in winningLines)
		{
			var (a, b, c) = (line[0], line[1], line[2]);
			if (board[a].HasValue && board[a] == board[b] && board[a] == board[c])
			{
				return board[a];
			}
		}

		return null; // No hay un ganador.
	}

	private string GetPlayerClass(PlayerType? player)
	{
		if (!player.HasValue)
		{
			return ";";
		}
		return player == PlayerType.X
			? "player-x"
			: "player-o";
	}

	private void LeaveGame()
	{
		gameStarted = false;
		PartidaId = 0;
		Jugador1Id = 0;
		Jugador2Id = 0;
		playerTypeSelection = null;
		board = new PlayerType?[9];
		errorMessage = null;
	}

	private void AbrirModalPartidas()
	{
		mostrarModal = true;
	}

	private void HandlePartidaSelected(int partidaId)
	{
		PartidaId = partidaId;
	}
}
